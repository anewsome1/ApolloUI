.alert {

  @if $enable-flex {
    display: flex;
    flex-direction: row;
    min-height: 2.5rem;
    align-items: center;
    padding-left: $alert-padding-x;
  } @else {
    display: block;
    position: relative;
    padding: $alert-padding-y $alert-padding-x;
  }

  z-index: 0;
  margin-bottom: $alert-shadow-height * 3;
  font-size: $alert-font-size;
  line-height: $alert-line-height;

  // Icons for message and close button
  &::before,
  .close {
    line-height: $alert-line-height;
    color: #fff;
  }

  &::before {
    @extend .icon;

    font-size: $alert-icon-size;
    margin-right: $alert-icon-margin;
    vertical-align: text-top;
  }

  &.alert-success::before {
    font-size: $alert-icon-margin;
    margin-right: $alert-icon-size;
  }

  // Bottom variant
  &.alert-bottom {
    margin-top: $alert-shadow-height * 3;
    margin-bottom: 0;
  }

  .close {
    @if $enable-flex {
      order: 2;
      margin-left: auto;
      padding-right: $alert-padding-x;
    } @else {
      position: absolute;
      top: 50%;
      right: $alert-padding-x;
      margin-top: -($alert-icon-size / 2);
    }
  }

  ///
  /// Alert states, based on `$alert-states` map
  ///

  @each $state, $state-props in $alert-states {
    $state-color: map-get($state-props, color);
    $state-bg: map-get($state-props, bg);
    $state-link-color: map-get($state-props, link);
    $state-icon: map-get($state-props, icon);

    &.alert-#{ $state } {
      @include alert-bg($bg-color: $state-bg, $text-color: $state-color, $icon: $state-icon);

      // TODO: Create mixin for the fade-out box shadow effect
      box-shadow: 0 $alert-shadow-height 0 0 transparentize($state-bg, .5),
                  0 ($alert-shadow-height * 2) 0 0 transparentize($state-bg, .75);

      &.alert-bottom {
        box-shadow: 0 (-$alert-shadow-height) 0 0 transparentize($state-bg, .5),
                    0 (-$alert-shadow-height * 2) 0 0 transparentize($state-bg, .75);
      }
    }
  }

}

