.form-group {
  @include clearfix();
  margin-bottom: $spacer;
}


.control-label {
  &.disabled {
    color: $gray;
  }
}

.form-control {
  display: block;
  width: 100%;
  padding: $form-padding-top $form-padding-horizontal $form-padding-bottom;
  border: $form-border-width solid $gray-lighter;
  font-size: $form-font-size;
  line-height: $form-line-height;
  white-space: nowrap;
  text-overflow: ellipsis;
  transition: all $transition-fast;
  height: $form-height;

  &,
  &:placeholder-shown {
  }

  // @FIXME we need a more noticeable focus indicator
  &:focus,
  &.focus {
    border-color: transparent;
    outline: none;
    box-shadow: $shadow-hover;
  }

  &:disabled,
  &.disabled {
    background-color: $gray-lightest; // @TODO: replace with light gray from palette
    box-shadow: none;
    cursor: not-allowed;
  }
}

.has-success,
.has-warning,
.has-danger {
  .form-control {
    position: relative;
    z-index: 1;
    border-color: $brand-danger;
  }
  .form-msg {
    @extend .alert;
    // @TODO: Replace with `.alert-sm` once that's ready
    padding-top: .5rem;
    padding-bottom: .5rem;
  }
}

@each $state, $props in $alert-states {
  $state-bg: map-get($props, bg);

  .has-#{ $state } {
    .form-control {
      border-color: $state-bg;
    }
    .form-msg {
      @extend .alert-#{ $state };
    }
  }  
}



///
/// Checkbox and Radio controls
///

[type='checkbox'],
[type='radio'] {
  position: absolute;
  opacity: 0;

  + label {
    display: inline-block;
    cursor: pointer;

    &::before {
      @extend .icon;

      display: inline-block;
      content: '';
      width: $checkbox-size;
      height: $checkbox-size;
      border: $checkbox-border;
      margin-right: $checkbox-size / 2;
      margin-bottom: -.125rem;  // ~2px
      line-height: .7;
      background-color: $body-bg;
      transition: all $transition-fast;
    }
  }

  &,
  & + label {
    cursor: pointer;
  }

  &:hover + label::before {
    box-shadow: $shadow-hover;
  }

  &:active + label::before {
    box-shadow: $shadow-active;
  }

  &:disabled {
    &,
    + label,
    + label::before {
      color: lighten($charcoal, 40%);
      cursor: not-allowed;
    }
    + label::before,
    &:hover + label::before {
      background-color: lighten($gray, 10%);
      box-shadow: none;
    }
  }
}

input[type="checkbox"] {
  &:checked + label:before {
    content: map-get($_icons-map, qualified); // 'qualified' checkmark
  }
}

input[type="radio"] {
  + label {
    &:before {
      border-radius: 50%;
    }
  }
  &:checked + label:before {
    background-color: $charcoal;
    box-shadow: inset 0 0 0 2px #fff;
  }
}

