.form-group {
  @include clearfix();
  margin-bottom: $form-margin-bottom;
}


.control-label {
  display: block;
  &.disabled {
    color: $gray;
  }

  &.required::after {
    content: "*";
    color: $brand-danger;
  }
}

.form-control {
  display: block;
  width: 100%;
  height: $component-height;
  padding: $form-padding-top $form-padding-x $form-padding-bottom;
  border: $form-border-width solid $charcoal-lighter;
  font-size: $form-font-size;
  line-height: $form-line-height;
  white-space: nowrap;
  text-overflow: ellipsis;
  transition: all $transition-fast;

  &,
  &:placeholder-shown {
  }

  // @FIXME we need a more noticeable focus indicator
  &:focus,
  &.focus {
    border-color: transparent;
    outline: none;
    box-shadow: $shadow-hover;
  }

  &:disabled,
  &.disabled {
    background-color: $neutral; // @TODO: replace with light gray from palette
    box-shadow: none;
    cursor: not-allowed;
  }

  &.input-lg {
    height: $component-height-lg;
    padding: $input-padding-y-lg $input-padding-x-lg;
  }
}

select.form-control {
  // appearance: none;
  background-color: #fff;
  // @FIXME: `select` tags don't have ::before or ::after pseudo-elements
  // &::after {
  //   @extend %icon-base;

  //   content: map-get($_icons-map, expand);
  // }
}

textarea.form-control {
  height: auto;
  white-space: inherit;
  overflow: inherit;
}

.has-success,
.has-warning,
.has-danger {
  .form-control {
    position: relative;
    z-index: 1;
    border-color: $brand-danger;
  }
  .form-msg {
    @extend .alert;
    // @TODO: Replace with `.alert-sm` once that's ready
    padding-top: .5rem;
    padding-bottom: .5rem;
  }
}

@each $state, $props in $alert-states {
  $state-bg: map-get($props, bg);

  .has-#{ $state } {
    .form-control {
      border-color: $state-bg;
    }
    .form-msg {
      @extend .alert-#{ $state };
    }
  }
}



///
/// Checkbox and Radio controls
///

// !!!
// @TODO: Remove the code below once we have everyone
// convinced that customizing controls that are
// designed to be left alone is a bad idea
// !!!

// .checkbox input[type='checkbox'],
// .radio input[type='radio'] {
//   appearance: none;

//   + label {
//     display: inline;
//     cursor: pointer;

//     &::before {
//       @extend .icon;

//       display: inline-block;
//       content: '';
//       // width: $checkbox-size;
//       // height: $checkbox-size;
//       margin-right: $checkbox-size / 3;
//       font-size: $checkbox-size;
//       line-height: $checkbox-size;
//       text-align: center;
//       vertical-align: top;
//       transition: all $transition-fast;
//     }
//   }

//   &:checked + label::before {
//     color: $checkbox-color;
//   }

//   &,
//   & + label {
//     cursor: pointer;
//   }

//   // &:hover + label::before {
//   //   box-shadow: $shadow-hover;
//   // }

//   // &:active + label::before {
//   //   box-shadow: $shadow-active;
//   // }

//   &:disabled {
//     &,
//     + label,
//     + label::before {
//       color: lighten($charcoal, 40%);
//       cursor: not-allowed;
//     }
//     + label::before,
//     &:hover + label::before {
//       // background-color: $charcoal-lighter;
//       box-shadow: none;
//     }
//   }
// }

// .checkbox input[type="checkbox"] {
//   + label::before {
//     content: map-get($_icons-map, box-unchecked);
//   }

//   &:checked + label::before {
//     content: map-get($_icons-map, box-checked);
//   }
// }

// .radio input[type="radio"] {
//   + label::before {
//     content: map-get($_icons-map, radio-unchecked);
//     border-radius: 50%;
//   }
//   &:checked + label:before {
//     content: map-get($_icons-map, radio-checked);
//   }

// }

.toggle {
  display: flex;

  input[type="radio"] {
    position: absolute;
    opacity: 0;

    + label {
      position: relative;
      z-index: 1;
      flex: 1;
      padding-top: $toggle-padding-y;
      padding-bottom: $toggle-padding-y;
      line-height: 1;
      text-align: center;
      color: $blue;
      background-color: rgba(255, 255, 255, .75);
      cursor: pointer;
      transition: all $transition-fast;

      &:hover,
      &:active {
        z-index: 2;
      }

      &:hover {
        background-color: rgba(255, 255, 255, 1);
        box-shadow: $shadow-hover;
      }

      &:active {
        background-color: $charcoal;
        color: #fff;
      }
    }

    &:checked + label {
      z-index: 2;
      color: #fff;
      background-color: $blue;
      box-shadow: $shadow-hover;
    }
  }
}


